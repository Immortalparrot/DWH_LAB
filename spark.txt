{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "87aa26d2-f58d-47ae-89a1-36bb672af368",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pyspark\n",
      "  Downloading pyspark-3.5.4.tar.gz (317.3 MB)\n",
      "     ---------------------------------------- 0.0/317.3 MB ? eta -:--:--\n",
      "     -------------------------------------- 0.0/317.3 MB 653.6 kB/s eta 0:08:06\n",
      "     ---------------------------------------- 0.2/317.3 MB 2.0 MB/s eta 0:02:42\n",
      "     ---------------------------------------- 0.5/317.3 MB 3.3 MB/s eta 0:01:35\n",
      "     ---------------------------------------- 0.8/317.3 MB 4.2 MB/s eta 0:01:15\n",
      "     ---------------------------------------- 1.3/317.3 MB 5.5 MB/s eta 0:00:58\n",
      "     ---------------------------------------- 2.4/317.3 MB 9.1 MB/s eta 0:00:35\n",
      "      -------------------------------------- 4.9/317.3 MB 14.8 MB/s eta 0:00:22\n",
      "     - ------------------------------------- 8.9/317.3 MB 24.7 MB/s eta 0:00:13\n",
      "     - ------------------------------------ 10.7/317.3 MB 36.4 MB/s eta 0:00:09\n",
      "     - ------------------------------------ 11.7/317.3 MB 46.7 MB/s eta 0:00:07\n",
      "     - ------------------------------------ 11.7/317.3 MB 46.7 MB/s eta 0:00:07\n",
      "     - ------------------------------------ 14.8/317.3 MB 40.9 MB/s eta 0:00:08\n",
      "     -- ----------------------------------- 17.9/317.3 MB 40.9 MB/s eta 0:00:08\n",
      "     -- ----------------------------------- 21.8/317.3 MB 54.4 MB/s eta 0:00:06\n",
      "     -- ----------------------------------- 25.0/317.3 MB 72.6 MB/s eta 0:00:05\n",
      "     --- ---------------------------------- 28.3/317.3 MB 73.1 MB/s eta 0:00:04\n",
      "     --- ---------------------------------- 31.2/317.3 MB 65.6 MB/s eta 0:00:05\n",
      "     ---- --------------------------------- 34.5/317.3 MB 73.1 MB/s eta 0:00:04\n",
      "     ---- --------------------------------- 37.7/317.3 MB 72.6 MB/s eta 0:00:04\n",
      "     ---- --------------------------------- 41.1/317.3 MB 72.6 MB/s eta 0:00:04\n",
      "     ----- -------------------------------- 44.3/317.3 MB 72.6 MB/s eta 0:00:04\n",
      "     ----- -------------------------------- 47.7/317.3 MB 72.6 MB/s eta 0:00:04\n",
      "     ------ ------------------------------- 51.3/317.3 MB 72.6 MB/s eta 0:00:04\n",
      "     ------ ------------------------------- 54.8/317.3 MB 73.1 MB/s eta 0:00:04\n",
      "     ------ ------------------------------- 58.3/317.3 MB 73.1 MB/s eta 0:00:04\n",
      "     ------- ------------------------------ 62.0/317.3 MB 81.8 MB/s eta 0:00:04\n",
      "     ------- ------------------------------ 65.5/317.3 MB 81.8 MB/s eta 0:00:04\n",
      "     -------- ----------------------------- 69.0/317.3 MB 81.8 MB/s eta 0:00:04\n",
      "     -------- ----------------------------- 72.7/317.3 MB 81.8 MB/s eta 0:00:03\n",
      "     --------- ---------------------------- 76.3/317.3 MB 81.8 MB/s eta 0:00:03\n",
      "     --------- ---------------------------- 80.0/317.3 MB 81.8 MB/s eta 0:00:03\n",
      "     ---------- --------------------------- 83.5/317.3 MB 81.8 MB/s eta 0:00:03\n",
      "     ---------- --------------------------- 87.9/317.3 MB 81.8 MB/s eta 0:00:03\n",
      "     ---------- --------------------------- 91.8/317.3 MB 81.8 MB/s eta 0:00:03\n",
      "     ----------- -------------------------- 95.2/317.3 MB 81.8 MB/s eta 0:00:03\n",
      "     ----------- -------------------------- 99.1/317.3 MB 81.8 MB/s eta 0:00:03\n",
      "     ------------ ------------------------ 103.0/317.3 MB 81.8 MB/s eta 0:00:03\n",
      "     ------------ ------------------------ 107.2/317.3 MB 93.0 MB/s eta 0:00:03\n",
      "     ------------- ----------------------- 111.5/317.3 MB 93.0 MB/s eta 0:00:03\n",
      "     ------------- ----------------------- 115.9/317.3 MB 93.9 MB/s eta 0:00:03\n",
      "     ------------- ----------------------- 119.8/317.3 MB 93.9 MB/s eta 0:00:03\n",
      "     -------------- ---------------------- 123.5/317.3 MB 93.9 MB/s eta 0:00:03\n",
      "     -------------- ---------------------- 128.0/317.3 MB 93.9 MB/s eta 0:00:03\n",
      "     --------------- --------------------- 132.2/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     --------------- --------------------- 136.8/317.3 MB 93.0 MB/s eta 0:00:02\n",
      "     ---------------- -------------------- 141.2/317.3 MB 93.0 MB/s eta 0:00:02\n",
      "     ---------------- -------------------- 145.6/317.3 MB 93.0 MB/s eta 0:00:02\n",
      "     ----------------- ------------------- 149.8/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ----------------- ------------------- 153.7/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------ ------------------ 158.2/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------ ------------------ 162.8/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------- ----------------- 167.5/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------- ---------------- 172.2/317.3 MB 108.8 MB/s eta 0:00:02\n",
      "     -------------------- --------------- 176.8/317.3 MB 108.8 MB/s eta 0:00:02\n",
      "     -------------------- --------------- 181.6/317.3 MB 108.8 MB/s eta 0:00:02\n",
      "     --------------------- -------------- 185.9/317.3 MB 110.0 MB/s eta 0:00:02\n",
      "     --------------------- -------------- 190.7/317.3 MB 110.0 MB/s eta 0:00:02\n",
      "     ---------------------- ------------- 195.3/317.3 MB 108.8 MB/s eta 0:00:02\n",
      "     ---------------------- ------------- 200.1/317.3 MB 108.8 MB/s eta 0:00:02\n",
      "     ----------------------- ------------ 205.0/317.3 MB 108.8 MB/s eta 0:00:02\n",
      "     ----------------------- ------------ 209.9/317.3 MB 108.8 MB/s eta 0:00:01\n",
      "     ------------------------ ------------ 211.0/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------------ ------------ 211.0/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------------ ------------ 211.0/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------------ ------------ 211.0/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------------ ------------ 211.0/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------------ ------------ 211.0/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------------ ------------ 211.0/317.3 MB 93.9 MB/s eta 0:00:02\n",
      "     ------------------------- ----------- 215.6/317.3 MB 25.2 MB/s eta 0:00:05\n",
      "     ------------------------- ----------- 216.4/317.3 MB 22.6 MB/s eta 0:00:05\n",
      "     ------------------------- ----------- 219.4/317.3 MB 21.8 MB/s eta 0:00:05\n",
      "     ------------------------- ----------- 221.6/317.3 MB 59.8 MB/s eta 0:00:02\n",
      "     -------------------------- ---------- 223.5/317.3 MB 46.9 MB/s eta 0:00:02\n",
      "     -------------------------- ---------- 225.1/317.3 MB 40.9 MB/s eta 0:00:03\n",
      "     -------------------------- ---------- 226.5/317.3 MB 43.7 MB/s eta 0:00:03\n",
      "     -------------------------- ---------- 227.7/317.3 MB 38.5 MB/s eta 0:00:03\n",
      "     --------------------------- --------- 235.6/317.3 MB 81.8 MB/s eta 0:00:01\n",
      "     --------------------------- -------- 243.9/317.3 MB 217.7 MB/s eta 0:00:01\n",
      "     ---------------------------- ------- 250.4/317.3 MB 162.4 MB/s eta 0:00:01\n",
      "     ----------------------------- ------ 257.3/317.3 MB 131.2 MB/s eta 0:00:01\n",
      "     ------------------------------ ----- 265.4/317.3 MB 165.0 MB/s eta 0:00:01\n",
      "     ------------------------------ ----- 270.6/317.3 MB 131.2 MB/s eta 0:00:01\n",
      "     ------------------------------- ---- 275.9/317.3 MB 108.8 MB/s eta 0:00:01\n",
      "     ------------------------------- ---- 281.4/317.3 MB 108.8 MB/s eta 0:00:01\n",
      "     -------------------------------- --- 286.4/317.3 MB 108.8 MB/s eta 0:00:01\n",
      "     --------------------------------- -- 292.0/317.3 MB 108.8 MB/s eta 0:00:01\n",
      "     --------------------------------- -- 296.9/317.3 MB 108.8 MB/s eta 0:00:01\n",
      "     ---------------------------------- - 302.5/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     ---------------------------------- - 307.9/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  313.4/317.3 MB 108.8 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -----------------------------------  317.3/317.3 MB 110.0 MB/s eta 0:00:01\n",
      "     -------------------------------------- 317.3/317.3 MB 3.0 MB/s eta 0:00:00\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'done'\n",
      "Collecting py4j==0.10.9.7 (from pyspark)\n",
      "  Obtaining dependency information for py4j==0.10.9.7 from https://files.pythonhosted.org/packages/10/30/a58b32568f1623aaad7db22aa9eafc4c6c194b429ff35bdc55ca2726da47/py4j-0.10.9.7-py2.py3-none-any.whl.metadata\n",
      "  Downloading py4j-0.10.9.7-py2.py3-none-any.whl.metadata (1.5 kB)\n",
      "Downloading py4j-0.10.9.7-py2.py3-none-any.whl (200 kB)\n",
      "   ---------------------------------------- 0.0/200.5 kB ? eta -:--:--\n",
      "   ---------------------------------------- 200.5/200.5 kB ? eta 0:00:00\n",
      "Building wheels for collected packages: pyspark\n",
      "  Building wheel for pyspark (setup.py): started\n",
      "  Building wheel for pyspark (setup.py): finished with status 'done'\n",
      "  Created wheel for pyspark: filename=pyspark-3.5.4-py2.py3-none-any.whl size=317849816 sha256=06110f4e3b5f511446c68fe70df39eda93a9af487a023cf82122c44f20911080\n",
      "  Stored in directory: c:\\users\\alexander\\appdata\\local\\pip\\cache\\wheels\\8d\\28\\22\\5dbae8a8714ef046cebd320d0ef7c92f5383903cf854c15c0c\n",
      "Successfully built pyspark\n",
      "Installing collected packages: py4j, pyspark\n",
      "Successfully installed py4j-0.10.9.7 pyspark-3.5.4\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pyspark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a8567270-c969-47ee-ab98-2f202f3470c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "\n",
    "# Создание SparkSession\n",
    "spark = SparkSession.builder \\\n",
    "    .appName(\"PostgresExample\") \\\n",
    "    .config(\"spark.driver.extraClassPath\", \"C:\\\\Users\\\\Alexander\\\\Downloads\\\\postgresql-42.7.5.jar\") \\\n",
    "    .getOrCreate()\n",
    "\n",
    "# Параметры подключения к PostgreSQL\n",
    "postgres_url = \"jdbc:postgresql://localhost:5438/postgres\"\n",
    "db_properties = {\n",
    "    \"user\": \"postgres\",\n",
    "    \"password\": \"12345\",\n",
    "    \"driver\": \"org.postgresql.Driver\"\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "6b8045ac-db2a-4c63-9365-f4976c030335",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---+------------+-------------------+--------------------+------------------+--------------------+----------+--------------------+--------------------+--------------------+-------------+--------+------------------+---------------------+------------+-----------+------------------+--------------------+-----------------+--------------------+\n",
      "| id|craftsman_id|     craftsman_name|   craftsman_address|craftsman_birthday|     craftsman_email|product_id|        product_name| product_description|        product_type|product_price|order_id|order_created_date|order_completion_date|order_status|customer_id|     customer_name|    customer_address|customer_birthday|      customer_email|\n",
      "+---+------------+-------------------+--------------------+------------------+--------------------+----------+--------------------+--------------------+--------------------+-------------+--------+------------------+---------------------+------------+-----------+------------------+--------------------+-----------------+--------------------+\n",
      "| 54|          54|        Dael Eagell|      588 Duke Place|        2004-05-27| rwooton1i@jimdo.com|        54|HandMade Men Grey...|Grey printed T-sh...|             clothes|           79|      54|        2022-09-02|                     |    delivery|         54|      Robbi Wooton|     4 Algoma Avenue|       1994-06-26|    rwooton1i@qq.com|\n",
      "| 56|          56| Lodovico Wakefield|6 Charing Cross C...|        1997-07-18|esharrem1k@omnitu...|        56|HandMade Men Whit...|White and black p...|             clothes|           94|      56|        2022-06-02|                     | in progress|         56|     Elset Sharrem|02578 Autumn Leaf...|       1991-10-04|esharrem1k@discov...|\n",
      "| 55|          55|       Karney Brigg|    92 Sage Junction|        1997-06-27|skybbye1j@yahoo.c...|        55|   Ragi - Huri Hittu|Ragi Huri Hittu, ...|Foodgrains, Oil &...|           85|      55|        2022-07-19|           2022-07-20|        done|         55|       Suzy Kybbye| 665 Eastwood Avenue|       1998-03-15|  skybbye1j@live.com|\n",
      "| 11|          11|       Cam Walbrook|     8 Emmet Terrace|        1997-12-04| ogellionb@slate.com|        11|        Idli - Sooji|Sooji idli is fas...|Foodgrains, Oil &...|            1|      11|        2022-05-12|           2022-05-14|        done|         11|     Olwen Gellion|   595 Rowland Plaza|       1996-03-01|ogellionb@hostgat...|\n",
      "|  1|           1|   Zacharias Buckel|    45773 Haas Point|        1991-11-12|ywarland1@cornell...|         1|Sooji Ordinary/Bo...|Sooji Ravva is a ...|Foodgrains, Oil &...|           20|       1|        2022-09-22|                     | in progress|          1|     Yetta Warland|90764 Towne Junction|       1998-01-26|   ywarland1@umn.edu|\n",
      "|  2|           2|         Row Mansel|48 Lighthouse Bay...|        1997-02-17|asecretan2@twitte...|         2|HandMade Women Pi...|Pink coloured was...|             clothes|            7|       2|        2022-06-25|                     |    delivery|          2|    Angel Secretan|      38 Cody Circle|       2002-12-01|asecretan2@slate.com|\n",
      "|  3|           3|   Jeanelle Healing|    575 Graedel Park|        1999-03-25|   csprason3@soup.io|         3|Multigrains Atta/...|The HandMade mult...|Foodgrains, Oil &...|           64|       3|        2022-09-05|           2022-09-06|        done|          3|   Clemmie Sprason|      76 Vahlen Hill|       1997-02-09| csprason3@naver.com|\n",
      "|  4|           4|       Ashley Hiorn|      2248 Muir Park|        2004-03-10|apanniers4@merria...|         4|HandMade Men Brow...|Brown and off-whi...|             clothes|           27|       4|        2022-10-30|                     | in progress|          4|   August Panniers|   6463 Hanover Hill|       2003-05-22|  apanniers4@soup.io|\n",
      "|  5|           5|    Bronnie Fussell|    8 Straubel Plaza|        1990-02-02|rbrammar5@histats...|         5|Select Atta/Godih...|HandMade is known...|Foodgrains, Oil &...|           52|       5|        2022-05-23|                     |    delivery|          5|     Rodge Brammar|86061 Eagle Crest...|       2003-09-08|rbrammar5@hubpage...|\n",
      "|  6|           6|      Noby Chaudron|  691 American Point|        1999-03-11|   ppetofi6@imdb.com|         6|HandMade Men Blue...|Blue checked casu...|             clothes|           37|       6|        2022-09-10|                     |     created|          6|      Perle Petofi| 49 Blackbird Street|       1990-08-07|ppetofi6@canalblo...|\n",
      "|  7|           7| Johnathon Greenard| 135 Lakeland Street|        1998-07-13| cdimitriades7@ow.ly|         7|  Besan/Kadale Hittu|Gram flour or bes...|Foodgrains, Oil &...|           38|       7|        2022-09-14|                     | in progress|          7|Catina Dimitriades|    0613 Clove Plaza|       1996-12-23|cdimitriades7@sou...|\n",
      "|  8|           8|        Clea Herity|     383 Chive Court|        1996-09-09|kmcclean8@yahoo.c...|         8|HandMade Men Brow...|Brown solid regul...|             clothes|           42|       8|        2022-05-09|           2022-05-12|        done|          8|    Karlan McClean|    1501 Duke Avenue|       1995-10-04| kmcclean8@google.es|\n",
      "|  9|           9|Willamina Duquesnay| 85120 Holmberg Hill|        2000-06-15|pdangl9@sitemeter...|         9|Sooji - Ordinary,...|The BB Royal Sooj...|Foodgrains, Oil &...|           64|       9|        2022-05-06|                     |     created|          9|     Pietrek Dangl|     74085 1st Trail|       2001-09-21|pdangl9@reference...|\n",
      "| 10|          10|        Kelly Ibell|   5846 Helena Point|        1997-04-26| ebreachera@narod.ru|        10|HandMade Women Na...|Navy Blue backpac...|             clothes|            5|      10|        2022-06-18|           2022-06-20|        done|         10| Emmeline Breacher|    0 Comanche Court|       2000-02-26|ebreachera@printf...|\n",
      "| 12|          12|         Caleb Dary|   2237 Roxbury Pass|        1997-05-19|  qroyalc@sbwire.com|        12|HandMade Men To B...|To Be The King Ea...|             clothes|           58|      12|        2022-07-22|                     | in progress|         12|     Quentin Royal|5563 Linden Crossing|       1996-07-08|   qroyalc@wired.com|\n",
      "| 13|          13|        Kassia Gary| 81702 Melody Center|        1995-07-06|hhedlestoned@hexu...|        13|     Organic - Maida|Maida is a wonder...|Foodgrains, Oil &...|           24|      13|        2022-12-27|                     |    delivery|         13|   Hale Hedlestone|9167 Rieder Crossing|       1991-08-15|hhedlestoned@exam...|\n",
      "| 14|          14|      Janna Gyorffy|   5 Prentice Center|        1992-06-13|bsaphire@hatena.n...|        14|HandMade Men Red ...|Red checked casua...|             clothes|           75|      14|        2022-12-06|                     | in progress|         14|  Bernadina Saphir|3799 Glendale Par...|       2003-10-08|       bsaphire@g.co|\n",
      "| 15|          15| Dorella Chritchlow|640 Buena Vista Park|        2003-12-20| bcorkishf@cam.ac.uk|        15|  Roasted Sooji/Rava|Rava is made of s...|Foodgrains, Oil &...|           48|      15|        2022-08-01|                     | in progress|         15|   Bastien Corkish|  10 Tomscot Terrace|       1993-07-14|bcorkishf@webeden...|\n",
      "| 16|          16|       Pooh Minguet|  261 Corscot Avenue|        1996-07-17|rduxburyg@craigsl...|        16|HandMade Gold-Ton...|Type: Handcrafted...|             clothes|           39|      16|        2022-09-13|                     | in progress|         16|      Raul Duxbury|8 Weeping Birch Road|       1995-04-23|   rduxburyg@fc2.com|\n",
      "| 17|          17|     Ruthi Sentance|  2734 Homewood Park|        1992-02-09|    wfleayh@youtu.be|        17|Organic - Ragi Fl...|Organic Ragi flou...|Foodgrains, Oil &...|            4|      17|        2022-06-06|           2022-06-07|        done|         17|     Wilfred Fleay|  4087 Kinsman Drive|       1992-07-13|     wfleayh@free.fr|\n",
      "+---+------------+-------------------+--------------------+------------------+--------------------+----------+--------------------+--------------------+--------------------+-------------+--------+------------------+---------------------+------------+-----------+------------------+--------------------+-----------------+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df = spark.read.jdbc(\n",
    "    url=postgres_url,\n",
    "    table=\"source1.complete_craft_market_wide\",\n",
    "    properties=db_properties\n",
    ")\n",
    "df.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "8caef3ca-5c38-4e45-97da-f8da7655a142",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_from_postgres(schema_name, table_name):\n",
    "    # Загрузка данных из таблицы PostgreSQL\n",
    "    return spark.read.format(\"jdbc\") \\\n",
    "        .option(\"url\", jdbc_url) \\\n",
    "        .option(\"driver\", db_properties[\"driver\"]) \\\n",
    "        .option(\"dbtable\", f\"{schema_name}.{table_name}\") \\\n",
    "        .option(\"user\", db_properties[\"user\"]) \\\n",
    "        .option(\"password\", db_properties[\"password\"]) \\\n",
    "        .load()\n",
    "\n",
    "def save_to_postgres(dataframe, schema_name, table_name, save_mode=\"append\"):\n",
    "    # Сохранение данных в таблицу PostgreSQL\n",
    "    dataframe.write.format(\"jdbc\") \\\n",
    "        .option(\"url\", jdbc_url) \\\n",
    "        .option(\"driver\", db_properties[\"driver\"]) \\\n",
    "        .option(\"dbtable\", f\"{schema_name}.{table_name}\") \\\n",
    "        .option(\"user\", db_properties[\"user\"]) \\\n",
    "        .option(\"password\", db_properties[\"password\"]) \\\n",
    "        .mode(save_mode) \\\n",
    "        .save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "id": "8bec216d-72fe-4dfb-a0c9-782294598ac3",
   "metadata": {},
   "outputs": [],
   "source": [
    "source1_df = load_from_postgres(\"source1\", \"craft_market_wide\")\n",
    "source2_masters_products = load_from_postgres(\"source2\", \"craft_market_masters_products\")\n",
    "source2_orders_customers = load_from_postgres(\"source2\", \"craft_market_orders_customers\")\n",
    "source3_orders = load_from_postgres(\"source3\", \"craft_market_orders\")\n",
    "source3_craftsmans = load_from_postgres(\"source3\", \"craft_market_craftsmans\")\n",
    "source3_customers = load_from_postgres(\"source3\", \"craft_market_customers\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "id": "8480f35d-718b-46b3-a1ef-fba874b9b1f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_columns = [\n",
    "    'order_id',\n",
    "    'order_created_date',\n",
    "    'order_completion_date',\n",
    "    'order_status',\n",
    "    'craftsman_id',\n",
    "    'craftsman_name',\n",
    "    'craftsman_address',\n",
    "    'craftsman_birthday',\n",
    "    'craftsman_email',\n",
    "    'product_id',\n",
    "    'product_name',\n",
    "    'product_description',\n",
    "    'product_type',\n",
    "    'product_price',\n",
    "    'customer_id',\n",
    "    'customer_name',\n",
    "    'customer_address',\n",
    "    'customer_birthday',\n",
    "    'customer_email' \n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "b6d3d151-fd55-4278-92f1-74042bab0d99",
   "metadata": {},
   "outputs": [],
   "source": [
    "# создаем объединенную таблицу из таблиц 1-го источника\n",
    "source1_df = source1_df.select(all_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "d3c2d71d-1fd3-4a69-a9e5-133d9f52b6f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# создаем объединенную таблицу из таблиц 2-го источника\n",
    "source2_df = source2_masters_products.join(\n",
    "    source2_orders_customers,\n",
    "    (source2_masters_products.product_id == source2_orders_customers.product_id) &\n",
    "    (source2_masters_products.craftsman_id == source2_orders_customers.craftsman_id)\n",
    ").select(\n",
    "    source2_masters_products.craftsman_id,\n",
    "    source2_masters_products.craftsman_name,\n",
    "    source2_masters_products.craftsman_address,\n",
    "    source2_masters_products.craftsman_birthday,\n",
    "    source2_masters_products.craftsman_email,\n",
    "    source2_masters_products.product_id,\n",
    "    source2_masters_products.product_name,\n",
    "    source2_masters_products.product_description,\n",
    "    source2_masters_products.product_type,\n",
    "    source2_masters_products.product_price,\n",
    "    source2_orders_customers.customer_id,\n",
    "    source2_orders_customers.customer_name,\n",
    "    source2_orders_customers.customer_address,\n",
    "    source2_orders_customers.customer_birthday,\n",
    "    source2_orders_customers.customer_email,\n",
    "    source2_orders_customers.order_id,\n",
    "    source2_orders_customers.order_created_date,\n",
    "    source2_orders_customers.order_completion_date,\n",
    "    source2_orders_customers.order_status\n",
    ").select(all_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "id": "4553951f-38a1-4e1d-8b5a-1e432b556b9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# создаем объединенную таблицу из таблиц 3-го источника\n",
    "source3_df = source3_orders.join(\n",
    "    source3_craftsmans,\n",
    "    source3_orders.craftsman_id == source3_craftsmans.craftsman_id\n",
    ").join(\n",
    "    source3_customers,\n",
    "    source3_orders.customer_id == source3_customers.customer_id\n",
    ").select(\n",
    "    source3_orders.order_id,\n",
    "    source3_orders.order_created_date,\n",
    "    source3_orders.order_completion_date,\n",
    "    source3_orders.order_status,\n",
    "    source3_craftsmans.craftsman_id,\n",
    "    source3_craftsmans.craftsman_name,\n",
    "    source3_craftsmans.craftsman_address,\n",
    "    source3_craftsmans.craftsman_birthday,\n",
    "    source3_craftsmans.craftsman_email,\n",
    "    source3_orders.product_id,\n",
    "    source3_orders.product_name,\n",
    "    source3_orders.product_description,\n",
    "    source3_orders.product_type,\n",
    "    source3_orders.product_price,\n",
    "    source3_customers.customer_id,\n",
    "    source3_customers.customer_name,\n",
    "    source3_customers.customer_address,\n",
    "    source3_customers.customer_birthday,\n",
    "    source3_customers.customer_email\n",
    ").select(all_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "id": "2e067958-9192-4163-8a06-70901b7f5e84",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Объединяем три DataFrame в один\n",
    "all_sources_df = source1_df.union(source2_df).union(source3_df)\n",
    "\n",
    "# Удаляем дубликаты из объединенного DataFrame\n",
    "all_sources_df = all_sources_df.distinct()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "249a3067-dc40-4f27-8876-8d29c83527b1",
   "metadata": {},
   "source": [
    "Создание таблиц измерений и фактов в DWH\n",
    "dwh.d_customers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "id": "26f8e2a9-08e7-4f1c-a538-3f62f714259e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+---------------+--------------------+-----------------+--------------------+--------------------+\n",
      "|customer_id|  customer_name|    customer_address|customer_birthday|      customer_email|           load_dttm|\n",
      "+-----------+---------------+--------------------+-----------------+--------------------+--------------------+\n",
      "|          2|  Andee Petford|   89 Sunbrook Plaza|       1997-06-07|  apetford5x@cnn.com|2025-01-22 01:13:...|\n",
      "|          4|Rriocard Lavies|  310 Browning Alley|       2004-10-20|rlavies6x@clickba...|2025-01-22 01:13:...|\n",
      "|          6|Saloma Skirving|  29070 Heath Avenue|       1991-12-20|sskirving9i@java.com|2025-01-22 01:13:...|\n",
      "|          8|Gaelan Ilyinski|     3 Dorton Center|       1992-09-06|  gilyinskic8@a8.net|2025-01-22 01:13:...|\n",
      "|         10|     Yancy Kurt|01490 Menomonie C...|       2000-02-28|     ykurte5@nba.com|2025-01-22 01:13:...|\n",
      "+-----------+---------------+--------------------+-----------------+--------------------+--------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Читаем данные из таблицы измерений\n",
    "d_customers_df = load_from_postgres(\"dwh\", \"d_customers\")\n",
    "customers_columns = ['customer_name', 'customer_address', 'customer_birthday', 'customer_email']\n",
    "\n",
    "# Удаляем из объединенного DataFrame записи, которые уже существуют в таблице измерений\n",
    "new_customers_df = all_sources_df.select(customers_columns).distinct().exceptAll(d_customers_df.select(customers_columns)) \\\n",
    "                                                             .withColumn(\"load_dttm\", current_timestamp())\n",
    "# кэшируем, чтоб спарк после записи не удалил таблицу\n",
    "new_customers_df = new_customers_df.cache()\n",
    "\n",
    "# Записываем оставшиеся записи в таблицу измерений\n",
    "save_to_postgres(new_customers_df, \"dwh\", \"d_customers\")\n",
    "\n",
    "# Проверяем первые 5 строк\n",
    "d_customers_df = load_from_postgres(\"dwh\", \"d_customers\")\n",
    "d_customers_df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "id": "447e89e6-fca3-4dc2-b934-0ee511cc79d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+---------------+--------------------+-----------------+--------------------+--------------------+\n",
      "|customer_id|  customer_name|    customer_address|customer_birthday|      customer_email|           load_dttm|\n",
      "+-----------+---------------+--------------------+-----------------+--------------------+--------------------+\n",
      "|         63|Ariel Hidderley|3616 American Ash...|       1995-05-21|ahidderleyik@tiny...|2025-01-22 01:13:...|\n",
      "|         64|    Del Kindred|220 Grasskamp Par...|       1993-06-03|     dkindredki@g.co|2025-01-22 01:13:...|\n",
      "|         65|    Dynah Lough|286 Mitchell Terrace|       1999-04-17|dloughlz@blogspot...|2025-01-22 01:13:...|\n",
      "|         66| Goldina Napper|    592 Nova Parkway|       2004-11-08|gnapperp7@hatena....|2025-01-22 01:13:...|\n",
      "|         67|    Sandye Mant|21947 Carpenter Park|       1996-10-01|    smantcp@admin.ch|2025-01-22 01:13:...|\n",
      "+-----------+---------------+--------------------+-----------------+--------------------+--------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Присоединяем customer_id из оригинальной таблицы d_customers_df (понадобится дальше для инкрементальной витрины)\n",
    "new_customers_df = new_customers_df.alias(\"new_customers\").join(\n",
    "    d_customers_df.alias(\"d_customers\"),\n",
    "    (col(\"new_customers.customer_name\") == col(\"d_customers.customer_name\")) &\n",
    "    (col(\"new_customers.customer_address\") == col(\"d_customers.customer_address\")) &\n",
    "    (col(\"new_customers.customer_birthday\") == col(\"d_customers.customer_birthday\")) &\n",
    "    (col(\"new_customers.customer_email\") == col(\"d_customers.customer_email\")),\n",
    "    how='left'\n",
    ").select(\n",
    "    col(\"d_customers.customer_id\").alias(\"customer_id\"),\n",
    "    col(\"new_customers.customer_name\"),\n",
    "    col(\"new_customers.customer_address\"),\n",
    "    col(\"new_customers.customer_birthday\"),\n",
    "    col(\"new_customers.customer_email\"),\n",
    "    col(\"new_customers.load_dttm\")\n",
    ")\n",
    "\n",
    "# Проверяем результат\n",
    "new_customers_df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "id": "bbe4a3ef-2820-42e9-bf7d-e5dbca139d37",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# обновление customer_id на фактический\n",
    "all_sources_df = all_sources_df.alias(\"all_sources_df\").join(\n",
    "    d_customers_df.alias(\"d_customers_df\"),\n",
    "    (col(\"all_sources_df.customer_name\") == col(\"d_customers_df.customer_name\")) &\n",
    "    (col(\"all_sources_df.customer_address\") == col(\"d_customers_df.customer_address\")) &\n",
    "    (col(\"all_sources_df.customer_birthday\") == col(\"d_customers_df.customer_birthday\")) &\n",
    "    (col(\"all_sources_df.customer_email\") == col(\"d_customers_df.customer_email\")),\n",
    "    how='left'\n",
    ").select(\n",
    "    col(\"d_customers_df.customer_id\").alias(\"customer_id\"),\n",
    "    col('all_sources_df.order_id'),\n",
    "    col('all_sources_df.order_created_date'),\n",
    "    col('all_sources_df.order_completion_date'),\n",
    "    col('all_sources_df.order_status'),\n",
    "    col('all_sources_df.craftsman_id'),\n",
    "    col('all_sources_df.craftsman_name'),\n",
    "    col('all_sources_df.craftsman_address'),\n",
    "    col('all_sources_df.craftsman_birthday'),\n",
    "    col('all_sources_df.craftsman_email'),\n",
    "    col('all_sources_df.product_id'),\n",
    "    col('all_sources_df.product_name'),\n",
    "    col('all_sources_df.product_description'),\n",
    "    col('all_sources_df.product_type'),\n",
    "    col('all_sources_df.product_price'),\n",
    "    col('all_sources_df.customer_name'),\n",
    "    col('all_sources_df.customer_address'),\n",
    "    col('all_sources_df.customer_birthday'),\n",
    "    col('all_sources_df.customer_email')\n",
    ")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "d371c56d-3a25-4fc2-9ac8-c50fc01adae3",
   "metadata": {},
   "source": [
    "dwh.d_products"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "id": "312d0d55-b8a6-40bd-b564-a5d9fc13af79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+--------------------+--------------------+----------------+-------------+--------------------+\n",
      "|product_id|        product_name| product_description|    product_type|product_price|           load_dttm|\n",
      "+----------+--------------------+--------------------+----------------+-------------+--------------------+\n",
      "|         1|Frangipani & Oil ...|Discover an excit...|Beauty & Hygiene|           73|2025-01-22 01:14:...|\n",
      "|         2|HandMade Women Bl...|Black and pink pr...|         clothes|           47|2025-01-22 01:14:...|\n",
      "|         4|Shower Gel - Soft...|Try the New HandM...|Beauty & Hygiene|           47|2025-01-22 01:14:...|\n",
      "|         3|HandMade Set of 6...|Set content: 6 ta...|         clothes|           12|2025-01-22 01:14:...|\n",
      "|         5|Proactive Protect...|This festive seas...|Beauty & Hygiene|           33|2025-01-22 01:14:...|\n",
      "+----------+--------------------+--------------------+----------------+-------------+--------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Читаем данные из таблицы измерений\n",
    "d_products_df = load_from_postgres(\"dwh\", \"d_products\")\n",
    "products_columns = ['product_name', 'product_description', 'product_type', 'product_price']\n",
    "\n",
    "# Удаляем из объединенного DataFrame записи, которые уже существуют в таблице измерений\n",
    "new_products_df = all_sources_df.select(products_columns).distinct().exceptAll(d_products_df.select(products_columns)) \\\n",
    "                                                             .withColumn(\"load_dttm\", current_timestamp())\n",
    "\n",
    "# кэшируем, чтоб спарк после записи не удалил таблицу\n",
    "new_products_df = new_products_df.cache()\n",
    "\n",
    "# Записываем оставшиеся записи в таблицу измерений\n",
    "save_to_postgres(new_products_df, \"dwh\", \"d_products\")\n",
    "\n",
    "# Проверяем первые 5 строк\n",
    "d_products_df = load_from_postgres(\"dwh\", \"d_products\")\n",
    "d_products_df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "id": "ad8f3080-c0be-43fe-bd93-38cd48545274",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+--------------------+--------------------+----------------+-------------+\n",
      "|product_id|        product_name| product_description|    product_type|product_price|\n",
      "+----------+--------------------+--------------------+----------------+-------------+\n",
      "|        85|HandMade Gold-Pla...|Gold-plated and b...|         clothes|           10|\n",
      "|        86|Liquid Handwash -...|Your Trusted Hand...|Beauty & Hygiene|           63|\n",
      "|        87|Pure & Gentle Bat...|There's nothing l...|Beauty & Hygiene|           83|\n",
      "|        88|HandMade Plus Siz...|Blue and beige la...|         clothes|           19|\n",
      "|        89|Foot Pumice Paddl...|HandMade foot pum...|Beauty & Hygiene|           25|\n",
      "+----------+--------------------+--------------------+----------------+-------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Присоединяем product_id из оригинальной таблицы d_products_df (потребуется далее для инкрементальной витрины)\n",
    "new_products_df = new_products_df.alias(\"new_products\").join(\n",
    "    d_products_df.alias(\"d_products\"),\n",
    "    (col(\"new_products.product_name\") == col(\"d_products.product_name\")) &\n",
    "    (col(\"new_products.product_description\") == col(\"d_products.product_description\")) &\n",
    "    (col(\"new_products.product_type\") == col(\"d_products.product_type\")) &\n",
    "    (col(\"new_products.product_price\") == col(\"d_products.product_price\")),\n",
    "    how='left'\n",
    ").select(\n",
    "    col(\"d_products.product_id\").alias(\"product_id\"),\n",
    "    col(\"new_products.product_name\"),\n",
    "    col(\"new_products.product_description\"),\n",
    "    col(\"new_products.product_type\"),\n",
    "    col(\"new_products.product_price\")\n",
    ")\n",
    "\n",
    "# Проверяем результат\n",
    "new_products_df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "id": "10e13f1c-5cbb-4fb9-a9a8-e939b755fd9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# обновление product_id на фактический\n",
    "all_sources_df = all_sources_df.alias(\"all_sources_df\").join(\n",
    "    d_products_df.alias(\"d_products_df\"),\n",
    "    (col(\"all_sources_df.product_name\") == col(\"d_products_df.product_name\")) &\n",
    "    (col(\"all_sources_df.product_description\") == col(\"d_products_df.product_description\")) &\n",
    "    (col(\"all_sources_df.product_type\") == col(\"d_products_df.product_type\")) &\n",
    "    (col(\"all_sources_df.product_price\") == col(\"d_products_df.product_price\")),\n",
    "    how='left'\n",
    ").select(\n",
    "    col(\"d_products_df.product_id\").alias(\"product_id\"),\n",
    "    col('all_sources_df.order_id'),\n",
    "    col('all_sources_df.order_created_date'),\n",
    "    col('all_sources_df.order_completion_date'),\n",
    "    col('all_sources_df.order_status'),\n",
    "    col('all_sources_df.craftsman_id'),\n",
    "    col('all_sources_df.craftsman_name'),\n",
    "    col('all_sources_df.craftsman_address'),\n",
    "    col('all_sources_df.craftsman_birthday'),\n",
    "    col('all_sources_df.craftsman_email'),\n",
    "    col('all_sources_df.customer_id'),\n",
    "    col('all_sources_df.product_name'),\n",
    "    col('all_sources_df.product_description'),\n",
    "    col('all_sources_df.product_type'),\n",
    "    col('all_sources_df.product_price'),\n",
    "    col('all_sources_df.customer_name'),\n",
    "    col('all_sources_df.customer_address'),\n",
    "    col('all_sources_df.customer_birthday'),\n",
    "    col('all_sources_df.customer_email')\n",
    ")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "12e40b2e-b9e6-4d3f-a6f2-9640de60479b",
   "metadata": {},
   "source": [
    "dwh.d_craftsmans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "8b4e8418-cd6b-4801-adf0-d41ee6725132",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+--------------+------------------+------------------+--------------------+--------------------+\n",
      "|craftsman_id|craftsman_name| craftsman_address|craftsman_birthday|     craftsman_email|           load_dttm|\n",
      "+------------+--------------+------------------+------------------+--------------------+--------------------+\n",
      "|           1|Baldwin Gebbie| 627 Browning Hill|        2004-08-26|jcarncross3j@feed...|2025-01-22 01:15:...|\n",
      "|           3|  Marge Skryne|  2 Kennedy Avenue|        2001-05-08|vblackaby6q@jiath...|2025-01-22 01:15:...|\n",
      "|           5|Demetra Muslim|71288 Vermont Road|        1999-12-27|kwestmorland70@xi...|2025-01-22 01:15:...|\n",
      "|           7|Jillene Inwood|  285 Reinke Plaza|        2000-02-11|egobeaufa@flavors.me|2025-01-22 01:15:...|\n",
      "|           9|     Russ Nind|3 Pawling Crossing|        2004-06-19|rtellwrightgo@spi...|2025-01-22 01:15:...|\n",
      "+------------+--------------+------------------+------------------+--------------------+--------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Читаем данные из таблицы измерений\n",
    "d_craftsmans_df = load_from_postgres(\"dwh\", \"d_craftsmans\")\n",
    "craftsmans_columns = ['craftsman_name', 'craftsman_address', 'craftsman_birthday', 'craftsman_email']\n",
    "\n",
    "# Удаляем из объединенного DataFrame записи, которые уже существуют в таблице измерений\n",
    "new_craftsmans_df = all_sources_df.select(craftsmans_columns).distinct().exceptAll(d_craftsmans_df.select(craftsmans_columns)) \\\n",
    "                                                             .withColumn(\"load_dttm\", current_timestamp())\n",
    "\n",
    "# кэшируем, чтоб спарк после записи не удалил таблицу\n",
    "new_craftsmans_df = new_craftsmans_df.cache()\n",
    "\n",
    "# Записываем оставшиеся записи в таблицу измерений\n",
    "save_to_postgres(new_craftsmans_df, \"dwh\", \"d_craftsmans\")\n",
    "\n",
    "# Проверяем первые 5 строк\n",
    "d_craftsmans_df = load_from_postgres(\"dwh\", \"d_craftsmans\")\n",
    "d_craftsmans_df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "id": "c4a1a083-8169-4a36-a2c3-5529c42ab107",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+---------------+--------------------+------------------+--------------------+\n",
      "|craftsman_id| craftsman_name|   craftsman_address|craftsman_birthday|     craftsman_email|\n",
      "+------------+---------------+--------------------+------------------+--------------------+\n",
      "|          59| Khalil Heining|  83956 Manley Plaza|        1998-02-08|ymcwhorter17@inte...|\n",
      "|          60|     Jake Draye|      2 Bluestem Way|        2003-08-01|dwannes8v@newsvin...|\n",
      "|          61|  Gustave Irwin|   54700 Swallow Way|        1992-09-02|jwherritc1@cornel...|\n",
      "|          62|  Zelma Scarffe|5560 Blackbird Plaza|        2000-05-24|ccripinh2@list-ma...|\n",
      "|          63|Katlin Guilloud|       9659 8th Lane|        1992-01-08|bsheberjf@pcworld...|\n",
      "+------------+---------------+--------------------+------------------+--------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Присоединяем craftsman_id из оригинальной таблицы d_craftsmans_df (потребуется далее для инкрементальной витрины)\n",
    "new_craftsmans_df = new_craftsmans_df.alias(\"new_craftsmans\").join(\n",
    "    d_craftsmans_df.alias(\"d_craftsmans\"),\n",
    "    (col(\"new_craftsmans.craftsman_name\") == col(\"d_craftsmans.craftsman_name\")) &\n",
    "    (col(\"new_craftsmans.craftsman_address\") == col(\"d_craftsmans.craftsman_address\")) &\n",
    "    (col(\"new_craftsmans.craftsman_birthday\") == col(\"d_craftsmans.craftsman_birthday\")) &\n",
    "    (col(\"new_craftsmans.craftsman_email\") == col(\"d_craftsmans.craftsman_email\")),\n",
    "    how='left'\n",
    ").select(\n",
    "    col(\"d_craftsmans.craftsman_id\").alias(\"craftsman_id\"),\n",
    "    col(\"new_craftsmans.craftsman_name\"),\n",
    "    col(\"new_craftsmans.craftsman_address\"),\n",
    "    col(\"new_craftsmans.craftsman_birthday\"),\n",
    "    col(\"new_craftsmans.craftsman_email\")\n",
    ")\n",
    "\n",
    "# Проверяем результат\n",
    "new_craftsmans_df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "id": "b8073c56-02e6-4dfd-bcb4-85bd9a77629d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# обновление craftsman_id на фактический\n",
    "all_sources_df = all_sources_df.alias(\"all_sources_df\").join(\n",
    "    d_craftsmans_df.alias(\"d_craftsmans_df\"),\n",
    "    (col(\"all_sources_df.craftsman_name\") == col(\"d_craftsmans_df.craftsman_name\")) &\n",
    "    (col(\"all_sources_df.craftsman_address\") == col(\"d_craftsmans_df.craftsman_address\")) &\n",
    "    (col(\"all_sources_df.craftsman_birthday\") == col(\"d_craftsmans_df.craftsman_birthday\")) &\n",
    "    (col(\"all_sources_df.craftsman_email\") == col(\"d_craftsmans_df.craftsman_email\")),\n",
    "    how='left'\n",
    ").select(\n",
    "    col(\"d_craftsmans_df.craftsman_id\").alias(\"craftsman_id\"),\n",
    "    col('all_sources_df.order_id'),\n",
    "    col('all_sources_df.order_created_date'),\n",
    "    col('all_sources_df.order_completion_date'),\n",
    "    col('all_sources_df.order_status'),\n",
    "    col('all_sources_df.product_id'),\n",
    "    col('all_sources_df.craftsman_name'),\n",
    "    col('all_sources_df.craftsman_address'),\n",
    "    col('all_sources_df.craftsman_birthday'),\n",
    "    col('all_sources_df.craftsman_email'),\n",
    "    col('all_sources_df.customer_id'),\n",
    "    col('all_sources_df.product_name'),\n",
    "    col('all_sources_df.product_description'),\n",
    "    col('all_sources_df.product_type'),\n",
    "    col('all_sources_df.product_price'),\n",
    "    col('all_sources_df.customer_name'),\n",
    "    col('all_sources_df.customer_address'),\n",
    "    col('all_sources_df.customer_birthday'),\n",
    "    col('all_sources_df.customer_email')\n",
    ")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "045bde3d-0785-4f9e-be90-dbcd579a23a9",
   "metadata": {},
   "source": [
    "dwh.f_orders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1dabd1fc-09d5-4f8e-bde4-12c084db8f28",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Читаем данные из таблицы измерений\n",
    "f_orders_df = load_from_postgres(\"dwh\", \"f_orders\")\n",
    "orders_columns = ['product_id', 'craftsman_id', 'customer_id', 'order_created_date', 'order_completion_date', 'order_status']\n",
    "\n",
    "# Удаляем из объединенного DataFrame записи, которые уже существуют в таблице измерений\n",
    "new_orders_df = all_sources_df.select(orders_columns).distinct().exceptAll(f_orders_df.select(orders_columns)) \\\n",
    "                                                             .withColumn(\"load_dttm\", current_timestamp())\n",
    "\n",
    "# кэшируем, чтоб спарк после записи не удалил таблицу\n",
    "new_orders_df = new_orders_df.cache()\n",
    "\n",
    "# Записываем оставшиеся записи в таблицу измерений\n",
    "save_to_postgres(new_orders_df, \"dwh\", \"f_orders\")\n",
    "\n",
    "# Проверяем первые 5 строк\n",
    "f_orders_df = load_from_postgres(\"dwh\", \"f_orders\")\n",
    "f_orders_df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "id": "6e172ae4-da60-42f3-aeff-cbfcba787da6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+----------+------------+-----------+------------------+---------------------+------------+\n",
      "|order_id|product_id|craftsman_id|customer_id|order_created_date|order_completion_date|order_status|\n",
      "+--------+----------+------------+-----------+------------------+---------------------+------------+\n",
      "|    NULL|      2826|        2049|       1194|        2020-01-22|           2020-01-23|        done|\n",
      "+--------+----------+------------+-----------+------------------+---------------------+------------+\n",
      "only showing top 1 row\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Присоединяем order_id из оригинальной таблицы f_orders_df (потребуется далее для инкрементальной витрины)\n",
    "new_orders_df = new_orders_df.alias(\"new_orders\").join(\n",
    "    f_orders_df.alias(\"f_orders\"),\n",
    "    (col(\"new_orders.product_id\") == col(\"f_orders.product_id\")) &\n",
    "    (col(\"new_orders.craftsman_id\") == col(\"f_orders.craftsman_id\")) &\n",
    "    (col(\"new_orders.customer_id\") == col(\"f_orders.customer_id\")) &\n",
    "    (col(\"new_orders.order_created_date\") == col(\"f_orders.order_created_date\")) &\n",
    "    (col(\"new_orders.order_completion_date\") == col(\"f_orders.order_completion_date\")) &\n",
    "    (col(\"new_orders.order_status\") == col(\"f_orders.order_status\")),\n",
    "    how='left'\n",
    ").select(\n",
    "    col(\"f_orders.order_id\").alias(\"order_id\"),\n",
    "    col(\"new_orders.product_id\"),\n",
    "    col(\"new_orders.craftsman_id\"),\n",
    "    col(\"new_orders.customer_id\"),\n",
    "    col(\"new_orders.order_created_date\"),\n",
    "    col(\"new_orders.order_completion_date\"),\n",
    "    col(\"new_orders.order_status\")\n",
    ")\n",
    "\n",
    "# Проверяем результат\n",
    "new_orders_df.show(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "be440514-3bf9-4eb1-923a-4dec4028005f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# обновление order_id на фактический\n",
    "all_sources_df = all_sources_df.alias(\"all_sources_df\").join(\n",
    "    f_orders_df.alias(\"f_orders_df\"),\n",
    "    (col(\"all_sources_df.product_id\") == col(\"f_orders_df.product_id\")) &\n",
    "    (col(\"all_sources_df.craftsman_id\") == col(\"f_orders_df.craftsman_id\")) &\n",
    "    (col(\"all_sources_df.customer_id\") == col(\"f_orders_df.customer_id\")) &\n",
    "    (col(\"all_sources_df.order_created_date\") == col(\"f_orders_df.order_created_date\")) &\n",
    "    (col(\"all_sources_df.order_completion_date\") == col(\"f_orders_df.order_completion_date\")) &\n",
    "    (col(\"all_sources_df.order_status\") == col(\"f_orders_df.order_status\")),\n",
    "    how='left'\n",
    ").select(\n",
    "    col(\"f_orders_df.order_id\").alias(\"order_id\"),\n",
    "    col('all_sources_df.craftsman_id'),\n",
    "    col('all_sources_df.order_created_date'),\n",
    "    col('all_sources_df.order_completion_date'),\n",
    "    col('all_sources_df.order_status'),\n",
    "    col('all_sources_df.product_id'),\n",
    "    col('all_sources_df.craftsman_name'),\n",
    "    col('all_sources_df.craftsman_address'),\n",
    "    col('all_sources_df.craftsman_birthday'),\n",
    "    col('all_sources_df.craftsman_email'),\n",
    "    col('all_sources_df.customer_id'),\n",
    "    col('all_sources_df.product_name'),\n",
    "    col('all_sources_df.product_description'),\n",
    "    col('all_sources_df.product_type'),\n",
    "    col('all_sources_df.product_price'),\n",
    "    col('all_sources_df.customer_name'),\n",
    "    col('all_sources_df.customer_address'),\n",
    "    col('all_sources_df.customer_birthday'),\n",
    "    col('all_sources_df.customer_email')\n",
    ")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "22b27542-461c-430f-8e3c-6af6617e154b",
   "metadata": {},
   "source": [
    "Витрина данных\n",
    "Создаем инкрементальную табличку с агрегатами."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "196a2f99-5d55-47a1-89b1-e0cfef1fe145",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession, Window, Row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "19f44774-8abd-4593-adf7-b1ea4017b353",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>craftsman_id</th>\n",
       "      <th>report_period</th>\n",
       "      <th>craftsman_name</th>\n",
       "      <th>craftsman_address</th>\n",
       "      <th>craftsman_birthday</th>\n",
       "      <th>craftsman_email</th>\n",
       "      <th>craftsman_money</th>\n",
       "      <th>platform_money</th>\n",
       "      <th>count_order</th>\n",
       "      <th>avg_price_order</th>\n",
       "      <th>avg_age_customer</th>\n",
       "      <th>median_time_order_completed</th>\n",
       "      <th>count_order_created</th>\n",
       "      <th>count_order_in_progress</th>\n",
       "      <th>count_order_delivery</th>\n",
       "      <th>count_order_done</th>\n",
       "      <th>count_order_not_done</th>\n",
       "      <th>top_product_category</th>\n",
       "      <th>load_dttm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>201</td>\n",
       "      <td>2019-02</td>\n",
       "      <td>Molly Kewish</td>\n",
       "      <td>1569 Lerdahl Drive</td>\n",
       "      <td>1994-05-02</td>\n",
       "      <td>bcatmulliu@mysql.com</td>\n",
       "      <td>39.6</td>\n",
       "      <td>4.4</td>\n",
       "      <td>0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>21.0047910000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Beauty &amp; Hygiene</td>\n",
       "      <td>2025-01-22 01:26:11.325136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>323</td>\n",
       "      <td>2022-10</td>\n",
       "      <td>Andi Westmancoat</td>\n",
       "      <td>584 North Court</td>\n",
       "      <td>2001-05-19</td>\n",
       "      <td>cranderson2y@tripadvisor.com</td>\n",
       "      <td>63.9</td>\n",
       "      <td>7.1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>34.4476390000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>clothes</td>\n",
       "      <td>2025-01-22 01:26:11.325136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>407</td>\n",
       "      <td>2019-10</td>\n",
       "      <td>Dillie Gianolini</td>\n",
       "      <td>0217 Tennyson Court</td>\n",
       "      <td>1991-12-25</td>\n",
       "      <td>cgrigorushkinkl@howstuffworks.com</td>\n",
       "      <td>243.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>33.1416840000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Beauty &amp; Hygiene</td>\n",
       "      <td>2025-01-22 01:26:11.325136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>646</td>\n",
       "      <td>2018-05</td>\n",
       "      <td>Wilfrid Manger</td>\n",
       "      <td>1 Texas Place</td>\n",
       "      <td>1990-09-16</td>\n",
       "      <td>jclemmenj7@tumblr.com</td>\n",
       "      <td>118.8</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0</td>\n",
       "      <td>132.0</td>\n",
       "      <td>21.0294320000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Beauty &amp; Hygiene</td>\n",
       "      <td>2025-01-22 01:26:11.325136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>685</td>\n",
       "      <td>2022-06</td>\n",
       "      <td>Gaylor Quillinane</td>\n",
       "      <td>96309 Burning Wood Terrace</td>\n",
       "      <td>2001-02-20</td>\n",
       "      <td>bvanelli87@techcrunch.com</td>\n",
       "      <td>19.8</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>34.8939080000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Beauty &amp; Hygiene</td>\n",
       "      <td>2025-01-22 01:26:11.325136</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   craftsman_id report_period     craftsman_name           craftsman_address  \\\n",
       "0           201       2019-02       Molly Kewish          1569 Lerdahl Drive   \n",
       "1           323       2022-10   Andi Westmancoat             584 North Court   \n",
       "2           407       2019-10   Dillie Gianolini         0217 Tennyson Court   \n",
       "3           646       2018-05     Wilfrid Manger               1 Texas Place   \n",
       "4           685       2022-06  Gaylor Quillinane  96309 Burning Wood Terrace   \n",
       "\n",
       "  craftsman_birthday                    craftsman_email  craftsman_money  \\\n",
       "0         1994-05-02               bcatmulliu@mysql.com             39.6   \n",
       "1         2001-05-19       cranderson2y@tripadvisor.com             63.9   \n",
       "2         1991-12-25  cgrigorushkinkl@howstuffworks.com            243.0   \n",
       "3         1990-09-16              jclemmenj7@tumblr.com            118.8   \n",
       "4         2001-02-20          bvanelli87@techcrunch.com             19.8   \n",
       "\n",
       "   platform_money  count_order  avg_price_order avg_age_customer  \\\n",
       "0             4.4            0             44.0    21.0047910000   \n",
       "1             7.1            0             71.0    34.4476390000   \n",
       "2            27.0            0            270.0    33.1416840000   \n",
       "3            13.2            0            132.0    21.0294320000   \n",
       "4             2.2            0             22.0    34.8939080000   \n",
       "\n",
       "   median_time_order_completed  count_order_created  count_order_in_progress  \\\n",
       "0                          3.0                    0                        0   \n",
       "1                          NaN                    0                        0   \n",
       "2                          1.0                    0                        0   \n",
       "3                          NaN                    0                        0   \n",
       "4                          2.0                    0                        0   \n",
       "\n",
       "   count_order_delivery  count_order_done  count_order_not_done  \\\n",
       "0                     0                 1                     0   \n",
       "1                     1                 0                     1   \n",
       "2                     0                 1                     0   \n",
       "3                     1                 0                     1   \n",
       "4                     0                 1                     0   \n",
       "\n",
       "  top_product_category                  load_dttm  \n",
       "0     Beauty & Hygiene 2025-01-22 01:26:11.325136  \n",
       "1              clothes 2025-01-22 01:26:11.325136  \n",
       "2     Beauty & Hygiene 2025-01-22 01:26:11.325136  \n",
       "3     Beauty & Hygiene 2025-01-22 01:26:11.325136  \n",
       "4     Beauty & Hygiene 2025-01-22 01:26:11.325136  "
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Добавляем отчетный период в таблицу заказов\n",
    "new_orders_df = new_orders_df.withColumn(\"report_period\", date_format(\"order_created_date\", \"yyyy-MM\"))\n",
    "\n",
    "# Создаем окно для нахождения самой популярной категории\n",
    "window_spec = Window.partitionBy(\"craftsman_id\", \"report_period\").orderBy(desc(\"count_category\"))\n",
    "\n",
    "# Считаем количество товаров каждой категории для каждого мастера и периода\n",
    "product_category_counts = new_orders_df.join(\n",
    "    new_products_df.alias(\"products\"),\n",
    "    new_orders_df.product_id == col(\"products.product_id\")\n",
    ").groupBy(\"craftsman_id\", \"report_period\", \"products.product_type\") \\\n",
    "    .agg(count(\"products.product_type\").alias(\"count_category\"))\n",
    "\n",
    "# Находим топ-1 категорию для каждого мастера и периода\n",
    "top_categories = product_category_counts.withColumn(\n",
    "    \"row_num\", row_number().over(window_spec)\n",
    ").filter(col(\"row_num\") == 1).select(\"craftsman_id\", \"report_period\", \"product_type\")\n",
    "\n",
    "# Добавляем расчет агрегатов\n",
    "new_craftsman_report_datamart_df = new_orders_df.join(\n",
    "    new_craftsmans_df.alias(\"craftsmans\"),\n",
    "    new_orders_df.craftsman_id == col(\"craftsmans.craftsman_id\")\n",
    ").join(\n",
    "    new_products_df.alias(\"products\"),\n",
    "    new_orders_df.product_id == col(\"products.product_id\")\n",
    ").join(\n",
    "    new_customers_df.alias(\"customers\"),\n",
    "    new_orders_df.customer_id == col(\"customers.customer_id\")\n",
    ").groupBy(\n",
    "    col(\"craftsmans.craftsman_id\"),\n",
    "    col(\"craftsmans.craftsman_name\"),\n",
    "    col(\"craftsmans.craftsman_address\"),\n",
    "    col(\"craftsmans.craftsman_birthday\"),\n",
    "    col(\"craftsmans.craftsman_email\"),\n",
    "    col(\"report_period\")\n",
    ").agg(\n",
    "    sum(col(\"products.product_price\") * 0.9).alias(\"craftsman_money\"),\n",
    "    sum(col(\"products.product_price\") * 0.1).alias(\"platform_money\"),\n",
    "    count(new_orders_df.order_id).alias(\"count_order\"),\n",
    "    avg(col(\"products.product_price\")).alias(\"avg_price_order\"),\n",
    "    avg(expr(\"DATEDIFF(current_date(), customers.customer_birthday) / 365.25\")).alias(\"avg_age_customer\"),\n",
    "    median(expr(\"DATEDIFF(order_completion_date, order_created_date)\")).alias(\"median_time_order_completed\"),\n",
    "    sum(when(new_orders_df.order_status == \"created\", 1).otherwise(0)).alias(\"count_order_created\"),\n",
    "    sum(when(new_orders_df.order_status == \"in_progress\", 1).otherwise(0)).alias(\"count_order_in_progress\"),\n",
    "    sum(when(new_orders_df.order_status == \"delivery\", 1).otherwise(0)).alias(\"count_order_delivery\"),\n",
    "    sum(when(new_orders_df.order_status == \"done\", 1).otherwise(0)).alias(\"count_order_done\"),\n",
    "    sum(when(new_orders_df.order_status != \"done\", 1).otherwise(0)).alias(\"count_order_not_done\")\n",
    ")\n",
    "\n",
    "# Присоединяем топ-1 категорию товаров\n",
    "new_craftsman_report_datamart_df = new_craftsman_report_datamart_df.join(\n",
    "    top_categories,\n",
    "    [\"craftsman_id\", \"report_period\"],\n",
    "    \"left\"\n",
    ").withColumnRenamed(\"product_type\", \"top_product_category\")\n",
    "\n",
    "# Добавляем столбец с текущей датой загрузки (опционально)\n",
    "new_craftsman_report_datamart_df = new_craftsman_report_datamart_df.withColumn(\"load_dttm\", current_timestamp())\n",
    "\n",
    "# Проверяем результат\n",
    "new_craftsman_report_datamart_df.toPandas().head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "da3a60e1-4682-4b48-a875-b29ea87682a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "craftsman_report_datamart = load_from_postgres(\"dwh\", \"craftsman_report_datamart\")\n",
    "\n",
    "key_columns = [\"craftsman_id\", \"report_period\"]\n",
    "\n",
    "# Новые строки которые нужно вставить\n",
    "new_rows_df = new_craftsman_report_datamart_df.join(\n",
    "    craftsman_report_datamart.select(*key_columns),\n",
    "    key_columns,\n",
    "    how=\"left_anti\"\n",
    ")\n",
    "\n",
    "# Старые строки которые нужно обновить\n",
    "updated_rows_df = new_craftsman_report_datamart_df.alias(\"new\").join(\n",
    "    craftsman_report_datamart.alias(\"existing\"),\n",
    "    key_columns,\n",
    "    how=\"inner\"\n",
    ").filter(\n",
    "    (col(\"new.craftsman_money\") != col(\"existing.craftsman_money\")) |\n",
    "    (col(\"new.platform_money\") != col(\"existing.platform_money\")) |\n",
    "    (col(\"new.count_order\") != col(\"existing.count_order\")) |\n",
    "    (col(\"new.avg_price_order\") != col(\"existing.avg_price_order\")) |\n",
    "    (col(\"new.avg_age_customer\") != col(\"existing.avg_age_customer\")) |\n",
    "    (col(\"new.median_time_order_completed\") != col(\"existing.median_time_order_completed\")) |\n",
    "    (col(\"new.count_order_created\") != col(\"existing.count_order_created\")) |\n",
    "    (col(\"new.count_order_in_progress\") != col(\"existing.count_order_in_progress\")) |\n",
    "    (col(\"new.count_order_delivery\") != col(\"existing.count_order_delivery\")) |\n",
    "    (col(\"new.count_order_done\") != col(\"existing.count_order_done\")) |\n",
    "    (col(\"new.count_order_not_done\") != col(\"existing.count_order_not_done\")) |\n",
    "    (col(\"new.top_product_category\") != col(\"existing.top_product_category\"))\n",
    ").select(\"new.*\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "c39f7747-6aa4-4133-a9f2-f1eaf83be616",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting psycopg2-binary\n",
      "  Obtaining dependency information for psycopg2-binary from https://files.pythonhosted.org/packages/61/69/3b3d7bd583c6d3cbe5100802efa5beacaacc86e37b653fc708bf3d6853b8/psycopg2_binary-2.9.10-cp311-cp311-win_amd64.whl.metadata\n",
      "  Using cached psycopg2_binary-2.9.10-cp311-cp311-win_amd64.whl.metadata (5.0 kB)\n",
      "Using cached psycopg2_binary-2.9.10-cp311-cp311-win_amd64.whl (1.2 MB)\n",
      "Installing collected packages: psycopg2-binary\n",
      "Successfully installed psycopg2-binary-2.9.10\n"
     ]
    }
   ],
   "source": [
    "!pip install psycopg2-binary --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "id": "b76c0172-862c-4116-9335-9090590c6c6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import psycopg2\n",
    "from psycopg2.extras import execute_values\n",
    "\n",
    "def update_existing_rows(df, schema, table):\n",
    "    rows = df.collect()\n",
    "    update_query = f\"\"\"\n",
    "    UPDATE {schema}.{table} AS target\n",
    "    SET craftsman_money = data.craftsman_money,\n",
    "        platform_money = data.platform_money,\n",
    "        count_order = data.count_order,\n",
    "        avg_price_order = data.avg_price_order,\n",
    "        avg_age_customer = data.avg_age_customer,\n",
    "        median_time_order_completed = data.median_time_order_completed,\n",
    "        count_order_created = data.count_order_created,\n",
    "        count_order_in_progress = data.count_order_in_progress,\n",
    "        count_order_delivery = data.count_order_delivery,\n",
    "        count_order_done = data.count_order_done,\n",
    "        count_order_not_done = data.count_order_not_done,\n",
    "        top_product_category = data.top_product_category,\n",
    "        load_dttm = data.load_dttm\n",
    "    FROM (VALUES %s) AS data (\n",
    "        craftsman_id, report_period, craftsman_money, platform_money, count_order, avg_price_order,\n",
    "        avg_age_customer, median_time_order_completed, count_order_created, count_order_in_progress,\n",
    "        count_order_delivery, count_order_done, count_order_not_done, top_product_category, load_dttm\n",
    "    )\n",
    "    WHERE target.craftsman_id = data.craftsman_id AND target.report_period = data.report_period\n",
    "    \"\"\"\n",
    "    conn = psycopg2.connect(\n",
    "        dbname=\"postgres\",\n",
    "        user=\"eezimin\",\n",
    "        password=\"qwerty\",\n",
    "        host=\"postgres\",\n",
    "        port=\"5432\"\n",
    "    )\n",
    "    with conn.cursor() as cursor:\n",
    "        values = [\n",
    "            (\n",
    "                row[\"craftsman_id\"], row[\"report_period\"], row[\"craftsman_money\"], row[\"platform_money\"],\n",
    "                row[\"count_order\"], row[\"avg_price_order\"], row[\"avg_age_customer\"], \n",
    "                row[\"median_time_order_completed\"], row[\"count_order_created\"],\n",
    "                row[\"count_order_in_progress\"], row[\"count_order_delivery\"], row[\"count_order_done\"],\n",
    "                row[\"count_order_not_done\"], row[\"top_product_category\"], row[\"load_dttm\"]\n",
    "            )\n",
    "            for row in rows\n",
    "        ]\n",
    "        execute_values(cursor, update_query, values)\n",
    "    conn.commit()\n",
    "    conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "1d21c0b6-a124-44c3-82b4-24c94162f99d",
   "metadata": {},
   "outputs": [],
   "source": [
    "save_to_postgres(new_rows_df.drop(\"load_dttm\"), \"dwh\", \"craftsman_report_datamart\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "id": "3cb9e223-06f6-426d-9b9a-9e8d097ac55f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c917cc9-fe47-423c-95c6-b4c3feae588e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Обновление таблицы инкрементальных загрузок\n",
    "load_dates_dma = load_from_postgres(\"dwh\", \"load_dates_craftsman_report_datamart\")\n",
    "\n",
    "load_dates_data = [Row(load_dttm=date.today())]  # Используем текущую дату из модуля datetime\n",
    "load_dates_df = spark.createDataFrame(load_dates_data).exceptAll(load_dates_dma.select('load_dttm'))\n",
    "\n",
    "# Запись в таблицу\n",
    "save_to_postgres(load_dates_df, \"dwh\", \"load_dates_craftsman_report_datamart\")\n",
    "\n",
    "load_from_postgres(\"dwh\", \"load_dates_craftsman_report_datamart\").show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}